;; gorilla-repl.fileformat = 1

;; **
;;; # Monopoly Lottery
;;; 
;;; At a recent monopoly night, a friend suggested some new "house rules". 
;;; 
;;; When you pass go, you can buy a lottery ticket for $50. If you land on the free parking, your lottery ticket wins, and adds $500 to your bag. I'm not a gambling man, but I suspected that I could figure whether the odds were in my favor or not.
;;; 
;;; Enter clojure. Let's figure out if we can game the system.
;; **

;; @@
(ns monpoly-test)
;; @@
;; =>
;;; {"type":"html","content":"<span class='clj-nil'>nil</span>","value":"nil"}
;; <=

;; **
;;; Let's start by making a function to roll two dice:
;; **

;; @@
		
(defn dice-roll
  "Rolls the dice, returning the tuple of rolls"
  []
  (take 2 (repeatedly #(inc (rand-int 6)))))

(println "Here's 10 dice rolls:" (take 10 (repeatedly #(dice-roll))))
;; @@
;; ->
;;; Here&#x27;s 10 dice rolls: ((2 2) (3 1) (3 2) (5 1) (1 1) (6 1) (3 6) (4 3) (3 6) (1 1))
;;; 
;; <-
;; =>
;;; {"type":"html","content":"<span class='clj-nil'>nil</span>","value":"nil"}
;; <=

;; **
;;; The Monopoly board has 40 squares. We're going to track which square we're on as we go around the board. After we pass go, we'll still keep incrementing our square. We'll take the remainder after diving by 40 to find out our board square.
;;; 
;; **

;; @@
(defn times-around [square]
  (int (/ square 40)))


(println "If I'm on square 234, I've passed go" (times-around 234) "times.")


(defn board-square [square]
  (mod square 40))

(println "If I'm on square 234, I'm on the board square" (board-square 234))
;; @@
;; ->
;;; If I&#x27;m on square 234, I&#x27;ve passed go 5 times.
;;; If I&#x27;m on square 234, I&#x27;m on the board square 34
;;; 
;; <-
;; =>
;;; {"type":"html","content":"<span class='clj-nil'>nil</span>","value":"nil"}
;; <=

;; **
;;; Let's also 
;; **

;; @@
(defn go-to-jail [square]
  (+ (* (times-around square) 40)
     10))

;; @@
;; =>
;;; {"type":"html","content":"<span class='clj-var'>#&#x27;monpoly-test/go-to-jail</span>","value":"#'monpoly-test/go-to-jail"}
;; <=

;; @@

;; @@
;; =>
;;; {"type":"html","content":"<span class='clj-long'>50</span>","value":"50"}
;; <=

;; @@
(defn move [& [square doubles]]
  (let [square (or square 0)
        doubles (or doubles 0)
        [d1 d2] (dice-roll)
        doubles? (= d1 d2)
        speeding? (and (= doubles 2) doubles?)]
    (if speeding?
      [(jail-from-square square) 0]
      [(+ square d1 d2) (if doubles? (inc doubles) doubles)])))
;; @@
;; =>
;;; {"type":"html","content":"<span class='clj-var'>#&#x27;monpoly-test/move</span>","value":"#'monpoly-test/move"}
;; <=

;; @@
(defn board-square [square]
  (mod square 40))

(def jail 10)
(def free-parking 20)
(def go-to-jail 30)
;; @@
;; =>
;;; {"type":"html","content":"<span class='clj-var'>#&#x27;monpoly-test/go-to-jail</span>","value":"#'monpoly-test/go-to-jail"}
;; <=

;; @@
(defn play-game [times-around]
  (loop [square 0 doubles 0 free-parkings 0]
    (let [[new-square new-doubles] (move square doubles)
          free-parkings (if (= 20 (mod new-square 40)) (inc free-parkings) free-parkings)]
      (if (>= (/ new-square 40)
             times-around)
        (double (/ free-parkings
           times-around))
        (recur new-square new-doubles free-parkings)))))
;; @@
;; =>
;;; {"type":"html","content":"<span class='clj-var'>#&#x27;monpoly-test/play-game</span>","value":"#'monpoly-test/play-game"}
;; <=

;; @@
(play-game 30000)

;; @@
;; =>
;;; {"type":"html","content":"<span class='clj-double'>0.1743666666666667</span>","value":"0.1743666666666667"}
;; <=

;; @@
(defn times-around [square]
  (int (/ square 40)))

(defn passed-go? [old-square new-square]
  (< (times-around old-square) (times-around new-square)))
;; @@
;; =>
;;; {"type":"html","content":"<span class='clj-var'>#&#x27;monpoly-test/passed-go?</span>","value":"#'monpoly-test/passed-go?"}
;; <=

;; @@
(defn buy-lottery-ticket [cash old-square new-square]
  (if (passed-go? old-square new-square)                                    
    (- cash 200)
    cash))

(defn collect-lottery [cash square]
  (if (= free-parking (board-square square))
    (+ cash 2000)
    cash))

(defn play-game [times-around]
  (loop [square 0 doubles 0 cash 0]
    (let [[new-square new-doubles] (move square doubles)]
      (if (>= (/ new-square 40)
             times-around)
        cash
        (recur new-square new-doubles 
              (-> cash
              (buy-lottery-ticket square new-square)
              (collect-lottery new-square)))))))
;; @@
;; =>
;;; {"type":"html","content":"<span class='clj-var'>#&#x27;monpoly-test/play-game</span>","value":"#'monpoly-test/play-game"}
;; <=

;; @@
(play-game 20)
;; @@
;; =>
;;; {"type":"html","content":"<span class='clj-long'>7550</span>","value":"7550"}
;; <=

;; @@
(require '[gorilla-plot.core :as plot])
(plot/histogram (take 5000 (repeatedly #(play-game 500))))
;; @@
;; =>
;;; {"type":"vega","content":{"axes":[{"scale":"x","type":"x"},{"scale":"y","type":"y"}],"scales":[{"name":"x","type":"linear","range":"width","zero":false,"domain":{"data":"c734f387-9a2b-45a4-b624-f6e4a6705879","field":"data.x"}},{"name":"y","type":"linear","range":"height","nice":true,"zero":false,"domain":{"data":"c734f387-9a2b-45a4-b624-f6e4a6705879","field":"data.y"}}],"marks":[{"type":"line","from":{"data":"c734f387-9a2b-45a4-b624-f6e4a6705879"},"properties":{"enter":{"x":{"scale":"x","field":"data.x"},"y":{"scale":"y","field":"data.y"},"interpolate":{"value":"step-before"},"fill":{"value":"steelblue"},"fillOpacity":{"value":0.4},"stroke":{"value":"steelblue"},"strokeWidth":{"value":2},"strokeOpacity":{"value":1}}}}],"data":[{"name":"c734f387-9a2b-45a4-b624-f6e4a6705879","values":[{"x":4050.0,"y":0},{"x":6300.0,"y":10.0},{"x":8550.0,"y":30.0},{"x":10800.0,"y":130.0},{"x":13050.0,"y":270.0},{"x":15300.0,"y":671.0},{"x":17550.0,"y":830.0},{"x":19800.0,"y":1102.0},{"x":22050.0,"y":826.0},{"x":24300.0,"y":697.0},{"x":26550.0,"y":245.0},{"x":28800.0,"y":138.0},{"x":31050.0,"y":38.0},{"x":33300.0,"y":10.0},{"x":35550.0,"y":2.0},{"x":37800.0,"y":1.0},{"x":40050.0,"y":0}]}],"width":400,"height":247.2187957763672,"padding":{"bottom":20,"top":10,"right":10,"left":50}},"value":"#gorilla_repl.vega.VegaView{:content {:axes [{:scale \"x\", :type \"x\"} {:scale \"y\", :type \"y\"}], :scales [{:name \"x\", :type \"linear\", :range \"width\", :zero false, :domain {:data \"c734f387-9a2b-45a4-b624-f6e4a6705879\", :field \"data.x\"}} {:name \"y\", :type \"linear\", :range \"height\", :nice true, :zero false, :domain {:data \"c734f387-9a2b-45a4-b624-f6e4a6705879\", :field \"data.y\"}}], :marks [{:type \"line\", :from {:data \"c734f387-9a2b-45a4-b624-f6e4a6705879\"}, :properties {:enter {:x {:scale \"x\", :field \"data.x\"}, :y {:scale \"y\", :field \"data.y\"}, :interpolate {:value \"step-before\"}, :fill {:value \"steelblue\"}, :fillOpacity {:value 0.4}, :stroke {:value \"steelblue\"}, :strokeWidth {:value 2}, :strokeOpacity {:value 1}}}}], :data [{:name \"c734f387-9a2b-45a4-b624-f6e4a6705879\", :values ({:x 4050.0, :y 0} {:x 6300.0, :y 10.0} {:x 8550.0, :y 30.0} {:x 10800.0, :y 130.0} {:x 13050.0, :y 270.0} {:x 15300.0, :y 671.0} {:x 17550.0, :y 830.0} {:x 19800.0, :y 1102.0} {:x 22050.0, :y 826.0} {:x 24300.0, :y 697.0} {:x 26550.0, :y 245.0} {:x 28800.0, :y 138.0} {:x 31050.0, :y 38.0} {:x 33300.0, :y 10.0} {:x 35550.0, :y 2.0} {:x 37800.0, :y 1.0} {:x 40050.0, :y 0})}], :width 400, :height 247.2188, :padding {:bottom 20, :top 10, :right 10, :left 50}}}"}
;; <=

;; @@
(require '[gorilla-plot.core :as plot])
(plot/histogram (take 5000 (repeatedly #(play-game 25))) :bins 12)
;; @@
;; =>
;;; {"type":"vega","content":{"axes":[{"scale":"x","type":"x"},{"scale":"y","type":"y"}],"scales":[{"name":"x","type":"linear","range":"width","zero":false,"domain":{"data":"58f4a086-c55b-48cd-8619-45b5b29b86be","field":"data.x"}},{"name":"y","type":"linear","range":"height","nice":true,"zero":false,"domain":{"data":"58f4a086-c55b-48cd-8619-45b5b29b86be","field":"data.y"}}],"marks":[{"type":"line","from":{"data":"58f4a086-c55b-48cd-8619-45b5b29b86be"},"properties":{"enter":{"x":{"scale":"x","field":"data.x"},"y":{"scale":"y","field":"data.y"},"interpolate":{"value":"step-before"},"fill":{"value":"steelblue"},"fillOpacity":{"value":0.4},"stroke":{"value":"steelblue"},"strokeWidth":{"value":2},"strokeOpacity":{"value":1}}}}],"data":[{"name":"58f4a086-c55b-48cd-8619-45b5b29b86be","values":[{"x":-4800.0,"y":0},{"x":-2633.333333333333,"y":304.0},{"x":-466.66666666666606,"y":617.0},{"x":1700.000000000001,"y":901.0},{"x":3866.666666666668,"y":991.0},{"x":6033.333333333335,"y":900.0},{"x":8200.000000000002,"y":600.0},{"x":10366.666666666668,"y":373.0},{"x":12533.333333333336,"y":184.0},{"x":14700.000000000004,"y":90.0},{"x":16866.66666666667,"y":28.0},{"x":19033.33333333334,"y":8.0},{"x":21200.000000000007,"y":4.0},{"x":23366.666666666675,"y":0}]}],"width":400,"height":247.2187957763672,"padding":{"bottom":20,"top":10,"right":10,"left":50}},"value":"#gorilla_repl.vega.VegaView{:content {:axes [{:scale \"x\", :type \"x\"} {:scale \"y\", :type \"y\"}], :scales [{:name \"x\", :type \"linear\", :range \"width\", :zero false, :domain {:data \"58f4a086-c55b-48cd-8619-45b5b29b86be\", :field \"data.x\"}} {:name \"y\", :type \"linear\", :range \"height\", :nice true, :zero false, :domain {:data \"58f4a086-c55b-48cd-8619-45b5b29b86be\", :field \"data.y\"}}], :marks [{:type \"line\", :from {:data \"58f4a086-c55b-48cd-8619-45b5b29b86be\"}, :properties {:enter {:x {:scale \"x\", :field \"data.x\"}, :y {:scale \"y\", :field \"data.y\"}, :interpolate {:value \"step-before\"}, :fill {:value \"steelblue\"}, :fillOpacity {:value 0.4}, :stroke {:value \"steelblue\"}, :strokeWidth {:value 2}, :strokeOpacity {:value 1}}}}], :data [{:name \"58f4a086-c55b-48cd-8619-45b5b29b86be\", :values ({:x -4800.0, :y 0} {:x -2633.333333333333, :y 304.0} {:x -466.66666666666606, :y 617.0} {:x 1700.000000000001, :y 901.0} {:x 3866.666666666668, :y 991.0} {:x 6033.333333333335, :y 900.0} {:x 8200.000000000002, :y 600.0} {:x 10366.666666666668, :y 373.0} {:x 12533.333333333336, :y 184.0} {:x 14700.000000000004, :y 90.0} {:x 16866.66666666667, :y 28.0} {:x 19033.33333333334, :y 8.0} {:x 21200.000000000007, :y 4.0} {:x 23366.666666666675, :y 0})}], :width 400, :height 247.2188, :padding {:bottom 20, :top 10, :right 10, :left 50}}}"}
;; <=

;; @@

;; @@
